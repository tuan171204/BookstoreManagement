// <auto-generated />
using System;
using BookstoreManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookstoreManagement.Migrations
{
    [DbContext(typeof(BookstoreContext))]
    [Migration("20251007003819_address1")]
    partial class address1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookstoreManagement.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BookstoreManagement.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BookstoreManagement.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("AuthorId")
                        .HasName("PK__Authors__70DAFC14563BCCAD");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AuthorID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LowStockThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    b.Property<int?>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("BookId")
                        .HasName("PK__Books__3DE0C22769882623");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookstoreManagement.Models.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("BookstoreManagement.Models.BookPromotion", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.HasIndex("BookId");

                    b.HasIndex("PromotionId");

                    b.ToTable("BookPromotions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B9C1A5785");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CodeId")
                        .HasName("PK__Code__C6DE2C3566AC2DA9");

                    b.HasIndex(new[] { "Entity", "Key" }, "Code_index_0")
                        .IsUnique();

                    b.ToTable("Code", (string)null);
                });

            modelBuilder.Entity("BookstoreManagement.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8FCCB6238");

                    b.HasIndex(new[] { "Phone" }, "UQ__Customer__5C7E359E320E9AE8")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534848515B3")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ExportDetail", b =>
                {
                    b.Property<int>("ExportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExportDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportDetailId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("ExportId")
                        .HasColumnType("int")
                        .HasColumnName("ExportID");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Subtotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ExportDetailId")
                        .HasName("PK__ExportDe__07C90359179E2C60");

                    b.HasIndex("BookId");

                    b.HasIndex("ExportId");

                    b.ToTable("ExportDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ExportTicket", b =>
                {
                    b.Property<int>("ExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Pending");

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ExportId")
                        .HasName("PK__ExportTi__E5C997A4BDE4968A");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "DocumentNumber" }, "UQ__ExportTi__6899391801847116")
                        .IsUnique()
                        .HasFilter("[DocumentNumber] IS NOT NULL");

                    b.ToTable("ExportTickets");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ImportDetail", b =>
                {
                    b.Property<int>("ImportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImportDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDetailId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ImportId")
                        .HasColumnType("int")
                        .HasColumnName("ImportID");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Subtotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.HasKey("ImportDetailId")
                        .HasName("PK__ImportDe__CDFBBA5111601CDF");

                    b.HasIndex("BookId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ImportTicket", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<decimal?>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("TotalQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("ImportId")
                        .HasName("PK__ImportTi__8697678A2864034F");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "DocumentNumber" }, "UQ__ImportTi__68993918E68FB85E")
                        .IsUnique()
                        .HasFilter("[DocumentNumber] IS NOT NULL");

                    b.ToTable("ImportTickets");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<decimal?>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF071592E8");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30CFA61025F");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PermissionId")
                        .HasName("PK__Permissi__EFA6FB0F5C37F42D");

                    b.HasIndex(new[] { "PermissionName" }, "UQ__Permissi__0FFDA357FF4F38A2")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PromotionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GiftBookId")
                        .HasColumnType("int")
                        .HasColumnName("GiftBookID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("MinPurchaseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__52C42F2F1E994C2A");

                    b.HasIndex("GiftBookId");

                    b.HasIndex("TypeId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("PublisherId")
                        .HasName("PK__Publishe__4C657E4B05BFBD93");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("BookstoreManagement.Models.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int?>("PermissionId1")
                        .HasColumnType("int");

                    b.Property<string>("RoleId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionId1");

                    b.HasIndex("RoleId1");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("SupplierId")
                        .HasName("PK__Supplier__4BE666942AC8CE28");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BookstoreManagement.Models.SupplierBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<decimal?>("DefaultCostPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasIndex("BookId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Book", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__Books__AuthorID__04E4BC85");

                    b.HasOne("BookstoreManagement.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK__Books__Publisher__05D8E0BE");

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookstoreManagement.Models.BookCategory", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookCateg__BookI__06CD04F7");

                    b.HasOne("BookstoreManagement.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__BookCateg__Categ__07C12930");

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookstoreManagement.Models.BookPromotion", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__BookPromo__BookI__0A9D95DB");

                    b.HasOne("BookstoreManagement.Models.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .IsRequired()
                        .HasConstraintName("FK__BookPromo__Promo__0B91BA14");

                    b.Navigation("Book");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ExportDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany("ExportDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__ExportDet__BookI__19DFD96B");

                    b.HasOne("BookstoreManagement.Models.ExportTicket", "Export")
                        .WithMany("ExportDetails")
                        .HasForeignKey("ExportId")
                        .IsRequired()
                        .HasConstraintName("FK__ExportDet__Expor__18EBB532");

                    b.Navigation("Book");

                    b.Navigation("Export");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ExportTicket", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Order", "Reference")
                        .WithMany("ExportTickets")
                        .HasForeignKey("ReferenceId")
                        .HasConstraintName("FK__ExportTic__Refer__17F790F9");

                    b.HasOne("BookstoreManagement.Models.AppUser", "User")
                        .WithMany("ExportTickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ExportTic__UserI__17036CC0");

                    b.Navigation("Reference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ImportDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany("ImportDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__ImportDet__BookI__160F4887");

                    b.HasOne("BookstoreManagement.Models.ImportTicket", "Import")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportId")
                        .IsRequired()
                        .HasConstraintName("FK__ImportDet__Impor__151B244E");

                    b.Navigation("Book");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ImportTicket", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Code", "PaymentMethod")
                        .WithMany("ImportTickets")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__ImportTic__Payme__14270015");

                    b.HasOne("BookstoreManagement.Models.Supplier", "Supplier")
                        .WithMany("ImportTickets")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK__ImportTic__Suppl__1332DBDC");

                    b.HasOne("BookstoreManagement.Models.AppUser", "User")
                        .WithMany("ImportTickets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ImportTic__UserI__123EB7A3");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Order", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__Customer__0C85DE4D");

                    b.HasOne("BookstoreManagement.Models.Code", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__PaymentM__0F624AF8");

                    b.HasOne("BookstoreManagement.Models.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FK__Orders__Promotio__0E6E26BF");

                    b.HasOne("BookstoreManagement.Models.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__UserID__0D7A0286");

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookstoreManagement.Models.OrderDetail", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany("OrderDetails")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__BookI__114A936A");

                    b.HasOne("BookstoreManagement.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderDeta__Order__10566F31");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Promotion", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "GiftBook")
                        .WithMany("Promotions")
                        .HasForeignKey("GiftBookId")
                        .HasConstraintName("FK__Promotion__GiftB__08B54D69");

                    b.HasOne("BookstoreManagement.Models.Code", "Type")
                        .WithMany("Promotions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Promotion__TypeI__09A971A2");

                    b.Navigation("GiftBook");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BookstoreManagement.Models.RolePermission", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__Permi__02FC7413");

                    b.HasOne("BookstoreManagement.Models.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId1");

                    b.HasOne("BookstoreManagement.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__RolePermi__RoleI__02084FDA");

                    b.HasOne("BookstoreManagement.Models.AppRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BookstoreManagement.Models.SupplierBook", b =>
                {
                    b.HasOne("BookstoreManagement.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK__SupplierB__BookI__1BC821DD");

                    b.HasOne("BookstoreManagement.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK__SupplierB__Suppl__1AD3FDA4");

                    b.Navigation("Book");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BookstoreManagement.Models.AppRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.AppUser", b =>
                {
                    b.Navigation("ExportTickets");

                    b.Navigation("ImportTickets");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Book", b =>
                {
                    b.Navigation("ExportDetails");

                    b.Navigation("ImportDetails");

                    b.Navigation("OrderDetails");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Code", b =>
                {
                    b.Navigation("ImportTickets");

                    b.Navigation("Orders");

                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ExportTicket", b =>
                {
                    b.Navigation("ExportDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.ImportTicket", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Order", b =>
                {
                    b.Navigation("ExportTickets");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookstoreManagement.Models.Supplier", b =>
                {
                    b.Navigation("ImportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
